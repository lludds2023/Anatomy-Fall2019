{
    "__type__": "Deck", 
    "children": [], 
    "crowdanki_uuid": "112fbdab-e075-11e9-8958-acde48001122", 
    "deck_config_uuid": "c2f6871e-ddb4-11e9-9a12-dca9046e6170", 
    "deck_configurations": [
        {
            "__type__": "DeckConfig", 
            "autoplay": true, 
            "crowdanki_uuid": "c2f6871e-ddb4-11e9-9a12-dca9046e6170", 
            "dyn": false, 
            "lapse": {
                "delays": [
                    1, 
                    10, 
                    15
                ], 
                "leechAction": 1, 
                "leechFails": 8, 
                "minInt": 1, 
                "mult": 0.0
            }, 
            "maxTaken": 60, 
            "name": "Active material", 
            "new": {
                "bury": false, 
                "delays": [
                    1, 
                    30
                ], 
                "initialFactor": 2500, 
                "ints": [
                    1, 
                    2, 
                    7
                ], 
                "order": 1, 
                "perDay": 600, 
                "separate": true
            }, 
            "replayq": true, 
            "rev": {
                "bury": false, 
                "ease4": 1.3, 
                "fuzz": 0.05, 
                "ivlFct": 1.0, 
                "maxIvl": 36500, 
                "minSpace": 1, 
                "perDay": 100
            }, 
            "timer": 0
        }
    ], 
    "desc": "", 
    "dyn": 0, 
    "extendNew": 10, 
    "extendRev": 50, 
    "media_files": [], 
    "name": "Q1-Physiology::Lecture 1", 
    "note_models": [
        {
            "__type__": "NoteModel", 
            "crowdanki_uuid": "5e8e5ade-df23-11e9-bdab-dca9046e6170", 
            "css": "\n.card {\n    font-family: Arial;\n    font-size: 20px;\n    color: black;\n    background-color: white;\n}\n\n.cloze {\n    font-weight: bold;\n    color: blue;\n}\n\ncz_hide {\n    display: none;\n}\n\n.nightMode .cloze{\n font-weight: bold;\n color: red;\n}", 
            "flds": [
                {
                    "font": "Arial", 
                    "media": [], 
                    "name": "Text", 
                    "ord": 0, 
                    "rtl": false, 
                    "size": 20, 
                    "sticky": true
                }, 
                {
                    "font": "Arial", 
                    "media": [], 
                    "name": "Extra", 
                    "ord": 1, 
                    "rtl": false, 
                    "size": 20, 
                    "sticky": true
                }, 
                {
                    "font": "Arial", 
                    "media": [], 
                    "name": "Hide others on the back side", 
                    "ord": 2, 
                    "rtl": false, 
                    "size": 20, 
                    "sticky": true
                }
            ], 
            "latexPost": "\\end{document}", 
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n", 
            "name": "Cloze (Hide all)-8ef4c", 
            "sortf": 0, 
            "tags": [], 
            "tmpls": [
                {
                    "afmt": "<script>\n/* --- DO NOT DELETE OR EDIT THIS SCRIPT --- */\nsetTimeout(function() {\n    var clozeBoxes = document.querySelector(\".cloze cloze2_w\");\n    var elements = document.querySelectorAll(\"cloze2.\" + clozeBoxes.className);\n    for(var i = 0 ; i < elements.length ; i++) {\n        elements[i].style.display=\"inline\";\n    }\n}, 0);\n/* --- DO NOT DELETE OR EDIT THIS SCRIPT --- */\n</script>\n\n\n<script>\n/* --- DO NOT DELETE OR EDIT THIS SCRIPT --- */\nsetTimeout(function() {\n    var clozeBoxes = document.querySelector(\".cloze cloze2_w\");\n    var elements = document.querySelectorAll(\"cloze2.\" + clozeBoxes.className);\n    for(var i = 0 ; i < elements.length ; i++) {\n        elements[i].classList.add(\"cloze\");\n        elements[i].style.display=\"inline\";\n    }\n}, 0);\n/* --- DO NOT DELETE OR EDIT THIS SCRIPT --- */\n</script>\n\n\n\n{{cloze:Text}}\n{{#Extra}}\n<hr>\n{{Extra}}\n{{/Extra}}\n\n{{#Hide others on the back side}}\n<style>\ncloze2 {\n    display: none;\n}\n\ncloze2_w {\n    display: inline-block;\n    width: 5em;\n    height: 1em;\n    background-color: #ffeba2;\n}\n\n.cloze cloze2 {\n    display: inline;\n}\n\n.cloze cloze2_w {\n    display: none;\n}\n\ncloze2.reveal-cloze2 {\n    display: inline;\n}\n\ncloze2_w.reveal-cloze2 {\n    display: none;\n}\n\n.cloze2-toggle {\n    -webkit-appearance: none;\n    display: block;\n    font-size: 1.3em;\n    height: 2em;\n    background-color: #ffffff;\n    width: 100%;\n    margin-top: 20px;\n}\n\n.cloze2-toggle:active {\n    background-color: #ffffaa;\n}\n</style>\n\n<script>\nfunction toggle() {\nvar elements = document.querySelectorAll('cloze2, cloze2_w');\n    for(var i = 0 ; i < elements.length ; i++) {\n        elements[i].classList.toggle('reveal-cloze2');\n    }\n}\n</script>\n\n\n\n<button class='cloze2-toggle' onclick='toggle()'>Toogle mask</button>\n{{/Hide others on the back side}}\n\n<script>\nvar createCookie = function(name, value, days) {\n    var expires;\n    if (days) {\n        var date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        expires = \"; expires=\" + date.toGMTString();\n    }\n    else {\n        expires = \"\";\n    }\n    document.cookie = name + \"=\" + value + expires + \"; path=/\";\n}\nfunction getCookie(c_name) {\n    if (document.cookie.length > 0) {\n        c_start = document.cookie.indexOf(c_name + \"=\");\n        if (c_start != -1) {\n            c_start = c_start + c_name.length + 1;\n            c_end = document.cookie.indexOf(\";\", c_start);\n            if (c_end == -1) {\n                c_end = document.cookie.length;\n            }\n            return unescape(document.cookie.substring(c_start, c_end));\n        }\n    }\n    return \"\";\n}\nfunction getRandomElms(){\n    var ul = document.querySelectorAll('ul.shuffle');\n    return ul\n}\nfunction getRandArr(elm, array){\n    for (var i = elm.children.length; i >= 0; i--) {\n        rand = Math.random() * i | 0;\n        array.push(rand)\n    }\n}\nfunction shuffleWithArr(elm, array){\n    elm.style.backgroundColor = \"inherit\"\n    for (var i = elm.children.length; i >= 0; i--) {\n        elm.appendChild(elm.children[array[i]]);\n    }\n}\nfunction run() {\n    var elms = getRandomElms()\n    var isFront = document.getElementById(\"front\");\n    for (var i = 0; i < elms.length; i++) {\n        var idxArr = [];\n        elm = elms[i]\n        if (isFront) {\n            getRandArr(elm, idxArr);\n            // convert idxArr array to a JSON string to be stored\n            var json_str = JSON.stringify(idxArr);\n            // persist the idxArr order and correct answers\n            createCookie('idxArr' + i, json_str);\n            var stored_data = idxArr\n        } else {\n            // get the idxArr order\n            var json_data = getCookie('idxArr' + i);\n            // get the array back from storage\n            var stored_data = JSON.parse(json_data);\n        }\n        shuffleWithArr(elm, stored_data)\n    }\n}\nrun();\n</script>", 
                    "bafmt": "", 
                    "bqfmt": "", 
                    "did": null, 
                    "name": "Cloze (Hide all)", 
                    "ord": 0, 
                    "qfmt": "<div id=\"front\">\n\n\n<style>\ncloze2 {\n    display: none;\n}\n\ncloze2_w {\n    display: inline-block;\n    width: 5em;\n    height: 1em;\n    background-color: #ffeba2;\n}\n</style>\n{{cloze:Text}}\n\n</div>\n\n<script>\nvar createCookie = function(name, value, days) {\n    var expires;\n    if (days) {\n        var date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        expires = \"; expires=\" + date.toGMTString();\n    }\n    else {\n        expires = \"\";\n    }\n    document.cookie = name + \"=\" + value + expires + \"; path=/\";\n}\nfunction getCookie(c_name) {\n    if (document.cookie.length > 0) {\n        c_start = document.cookie.indexOf(c_name + \"=\");\n        if (c_start != -1) {\n            c_start = c_start + c_name.length + 1;\n            c_end = document.cookie.indexOf(\";\", c_start);\n            if (c_end == -1) {\n                c_end = document.cookie.length;\n            }\n            return unescape(document.cookie.substring(c_start, c_end));\n        }\n    }\n    return \"\";\n}\nfunction getRandomElms(){\n    var ul = document.querySelectorAll('ul.shuffle');\n    return ul\n}\nfunction getRandArr(elm, array){\n    for (var i = elm.children.length; i >= 0; i--) {\n        rand = Math.random() * i | 0;\n        array.push(rand)\n    }\n}\nfunction shuffleWithArr(elm, array){\n    elm.style.backgroundColor = \"inherit\"\n    for (var i = elm.children.length; i >= 0; i--) {\n        elm.appendChild(elm.children[array[i]]);\n    }\n}\nfunction run() {\n    var elms = getRandomElms()\n    var isFront = document.getElementById(\"front\");\n    for (var i = 0; i < elms.length; i++) {\n        var idxArr = [];\n        elm = elms[i]\n        if (isFront) {\n            getRandArr(elm, idxArr);\n            // convert idxArr array to a JSON string to be stored\n            var json_str = JSON.stringify(idxArr);\n            // persist the idxArr order and correct answers\n            createCookie('idxArr' + i, json_str);\n            var stored_data = idxArr\n        } else {\n            // get the idxArr order\n            var json_data = getCookie('idxArr' + i);\n            // get the array back from storage\n            var stored_data = JSON.parse(json_data);\n        }\n        shuffleWithArr(elm, stored_data)\n    }\n}\nrun();\n</script>\n", 
                    "scratchPad": false
                }
            ], 
            "type": 1, 
            "vers": []
        }
    ], 
    "notes": [
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "{{c1::Placeholder card&nbsp;}}", 
                "", 
                ""
            ], 
            "flags": 0, 
            "guid": "c*.5-S.+rh", 
            "note_model_uuid": "5e8e5ade-df23-11e9-bdab-dca9046e6170", 
            "tags": []
        }
    ]
}